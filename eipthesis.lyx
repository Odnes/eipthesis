#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\DeclareMathSizes{10}{12}{7}{5}
\usepackage{url}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
\begin_inset Graphics
	filename assets/logo.png

\end_inset


\begin_inset Newline newline
\end_inset

Enterprise Integration Patterns
\begin_inset Newline newline
\end_inset

Building message-oriented middleware with Apache Camel
\end_layout

\begin_layout Author
Odysseas Neslechanidis
\begin_inset Newline newline
\end_inset

Supervisor: Christos Gkogkos
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Address
\align center
Graduation Thesis
\end_layout

\begin_layout Address
\align center
University of Ioannina
\begin_inset Newline newline
\end_inset

Department of Informatics and Telecommunications
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Abstract
The term "Enterprise Integration Patterns (EIPs)" refers to a vocabulary
 of solutions to common problems in the integration of enteprise systems.
 Of such vocabularies pattern languages may be constituted to allow complex
 business flows of diverse form to be described and handled in a uniform
 way.
 
\end_layout

\begin_layout Abstract
Apache Camel is a framework that implements EIPs around a common interface
 based on Java Message Objects.
 Camel also provides an IDE-friendly declarative Domain Specific Language
 (DSL) oriented around this interface, which enables integration flows between
 disparate systems ("Camel routes") to be described neatly as Java Messages
 passed around between chained camel methods.
\end_layout

\begin_layout Abstract
The specifics of the underlying communication protocols (FTP, http, ActiveMessag
eQueue etc) are abstracted away and the flow of information is cleanly described
, leaving such considerations as availability, load balancing, validation,
 security as the primary factors influencing the middleware's architectural
 complexity.
\end_layout

\begin_layout Abstract
In this thesis production deployments of Java Spring middleware utilizing
 Apache Camel will be studied.
 The most commonly used EIPs' Camel implementations will be inspected, and
 a comparison with more established integration tooling will be made when
 convenient, to ascertain the benefits of the Message-Oriented Middleware
 (MOM)-backed Camel DSL approach.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
This thesis was approved by a three-person examination committee.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Examination Commitee
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
Christos Gkogkos
\end_layout

\begin_layout Enumerate
John Doe
\end_layout

\begin_layout Enumerate
John Smith
\end_layout

\begin_layout Subsection*
Affidavit
\end_layout

\begin_layout Standard
I hereby affirm that this Bachelor’s Thesis represents my own written work
 and that I have used no sources and aids other than those indicated.
 All passages quoted from publications or paraphrased from these sources
 are properly cited and attributed.The thesis was not submitted in the same
 or in a substantially similar version, not even partially, to another examinati
on board and was not published elsewhere.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Signed,
\end_layout

\begin_layout Standard
Neslechanidis Odysseas 
\begin_inset space \hfill{}
\end_inset

All Rights Reserved ©
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Address
\align center
\begin_inset Newpage pagebreak
\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
The language of Enterprise Application Integration (EAI)
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Enterprise Application Software (EAS) is the term for computer prorams used
 to satisfy the needs of an organization rather than individual users.
 Almost all business operations, at different points in time, have come
 to benefit from the proliferation of software in this space.
 Commonly used acronyms used to categorize such software include ERP (Enteprise
 Resource Planning), CRM (Customer Relationship Management), CMS (Content
 Management System), BI (Business Intelligence), WMS (Warehouse Management
 System) (TODO Streamline acronyms: some are software-specific, others not
 so) and serve to automate every business need of modern enteprises, from
 it's customer facing operations, to keeping track of warehouse inventory,
 calculating billing and taxes, observing regulations, and much more.
 While comprehensive enterprise software suites offering differing degrees
 of customizability have come to exist, owing to the organisational similarity
 of enterprises above a certain scale, switching costs (TODO add footnote),
 preservation of optionality in partnering with software vendors (EIPbook
 p32), as well as other adjoining business considerations, have hindered
 their more widespread adoption.
 This has necessitated the systematic study and development of solutions
 for Enterprise Application Integration, among which message-oriented middleware
 has stood out as one the most promising.
\end_layout

\begin_layout Section
Islands of automation and the advent of EAI
\end_layout

\begin_layout Standard
The term 
\begin_inset Quotes eld
\end_inset

Islands of automation
\begin_inset Quotes erd
\end_inset

 was a popular term intoduced in the 1980s to describe the status quo of
 automation systems existing within information silos.
 The rapid development and adoption of enterprise software systems during
 this time came to pass with little regard for the ability of those systems
 to communicate with one another.
 
\end_layout

\begin_layout Standard
(TODO INNEFICIENCIES of isolation and drawbacks of adhoc point2point solutions
 )
\end_layout

\begin_layout Standard
The field of Enterprise Application Integration (EAI) is a field of study
 aiming to refine a framework for rectifying these inefficiencies.
 The shifting nature of the business landscape and of enterprises that operate
 within it, together with the continued innovation in, and expansion of,
 the EAS space, has resulted in it being a complicated problem to tackle.
 
\end_layout

\begin_layout Standard
Enterprise software is adopted at different times, it is developed from
 different vendors, at different points in time, oriented towards different
 business needs.
 
\end_layout

\begin_layout Standard
The employment of Domain-driven design, in recognition of the maintainability
 and extensibility benefits domain-expert input in the refining of the software'
s domain model confers, is a fact further complicating the effort of business
 software consolidation.
 
\end_layout

\begin_layout Standard
To this day, the introduction of a (TODO define middleware) middleware stack
 remains a very common business need.
 
\end_layout

\begin_layout Section
Introducing EAI in a organization
\end_layout

\begin_layout Subsection
General challenges
\end_layout

\begin_layout Standard
Prior to engaging with the technical aspects of Enterprise Application Integrati
on, it is necessary to consider a set of social and organizational challenges
 that the development and adoption of such a solution might necessitate
 or bring about.
\end_layout

\begin_layout Standard
Enterprise Application Integration often requires a significant shift in
 corporate politics.
 By extension of Conway's law that postulates that 
\begin_inset Quotes eld
\end_inset

Organizations which design systems are constrained to produce designs which
 are copies of the communication structures of these organizations.
\begin_inset Quotes erd
\end_inset

, it appears that the consolidation of enterprise software tools serving
 business processes often necessitates a consolidation of the business units
 and IT departments involved in those same processes.
 (EIPbook p32)
\end_layout

\begin_layout Standard
Furthermore, owing to the wide scope of a middleware integration solution
 bringing together critical business functions, the novel risk of failure
 or misbehavior of such a system has to be internalized.
 The risk profile and magnitude of reorganization around such a single point
 of failure ought to be carefully considered.
\end_layout

\begin_layout Standard
Bordering the technical side, the feasibility of integrating systems by
 modifying them to better fit the integration architecture, rather than
 by having to design the integration architecture to work around the various
 systems' limitations and deficiencies, also often depends on political
 factors.
 In that vein, unsupported legacy systems still in operation, systems under
 proprietary licenses, and systems whose support is outsourced under more
 or less stringent long-term agreements can adversely influence the complexity
 of the final product.
\end_layout

\begin_layout Standard
In terms of standardization, it bears mentioning that despite the benefit
 of convergence around Web Services and a Service Oriented approach to middlewar
e architecture (which will be expounded upon in later chapters), the proliferati
on of new extensions or interpretations of the standard, and most significantly
 the shift towards REST (and, more recently GraphQL) in lockstep with the
 mobile revolution, has created new challenges for integration engineers.
 REST, in particular, owing to it being an architectural style for software
 that expose http APIs rather than a protocol for web services per se, is
 frequently implemented partially and/or wrongly, often necessitating ad-hoc
 code for the consumption of APIs exposed in this manner.
\end_layout

\begin_layout Standard
Finally, the operations aspect of utilizing middleware solutions presents
 a unique challenge, as maintenance, deployment, monitoring and troubleshooting
 of such heterogeneous, distributed systems commonly require mixes of skills
 which are not par for the course to be found in single individuals.
 To companies or organizations of sufficient scale as to already necessitate
 a formalized employee training regime, the overhead for the maintenance
 of such human capital might be lower.
 (EIPbook p32)
\end_layout

\begin_layout Subsection
Types of integration
\end_layout

\begin_layout Standard
While the above challenges generally apply to every approach in the broader
 category of integration, many further issues have to be considered depending
 on the business aims that dictate, and the technical aspects tha come as
 a consequence of, the prospective type of integration solution.
 The following categorization has been proposed:
\end_layout

\begin_layout Subsubsection
Information Portals
\end_layout

\begin_layout Standard
Information portals serve to aggregate information from disparate systems
 within an organization with the aim of making it more accesible to humans.
 They often facilitate the collaboration between different departments and
 physical locations.
 They are also commonly used in business decision processing and data analysis.
 Common features include multi-window views serving information from different
 sources with automatic refresh of related windows during navigation, search,
 tagging and other categorization schemes.
 
\end_layout

\begin_layout Standard
Various other more advanced features are common, but being as they cater
 to particular business functions, employees roles or departments, no account
 of those will be attempted.
 Indeed, one of the common abstract features, or aims, of such systems,
 is the personalization of the displayed information, achieved through the
 profiling of users based on role, experience, competencies, habits and
 expressed preferences.
 
\end_layout

\begin_layout Subsubsection
Data Replication 
\end_layout

\begin_layout Standard
Many business systems require access to the same data, but are designed
 to utilize their own, separate datastores.
 The resulting data replication necessitates provisions for maintaining
 the data synchronized.
 Commonly utilized for those purposes are the replication features built
 into modern Database Management Systems, the file export and import functions
 supported by many Enterprise Software Systems, and message-oriented middleware
 automating transport of data via messages between arbitrary datastore solutions.
\end_layout

\begin_layout Subsubsection
Shared Business Functions
\end_layout

\begin_layout Standard
Needless duplication can exist in code serving business functions as well
 as in data.
 Were supported, invocation of shared business functions implemented as
 services (A service is a well-defined function that is universally available
 and responds to requests from “service consumers
\begin_inset Quotes erd
\end_inset

) can help avoid the native implementation of redundant functionality.
\end_layout

\begin_layout Standard
Were feasible, the need for data replication can also be circumvented via
 this approach by serving shared data as a service.
 In that vein, some criteria to be considered include the amount of control
 that is had over the systems (calling a shared function is usually more
 intrusive than loading data into the database) and the rate of change of
 the relevant data (service invocation is costlier than data access, therefore
 is less efficient for relatively frequently accessed, relatively static
 data).
\end_layout

\begin_layout Subsubsection
Service-Oriented Architectures and Distributed Business Processes
\end_layout

\begin_layout Standard
Once an enterprise assembles a collection of useful services, managing the
 services becomes an important function.
 
\end_layout

\begin_layout Standard
Service Oriented Architecture is a proposed style of service design and
 orchestration that incorporates the best industry practices in structuring
 middleware solutions around services that correspond to business functions.
 This paricular approach to middleware architecture shall be expounded upon
 in a later chapter.
\end_layout

\begin_layout Standard
A variant dubbed 
\begin_inset Quotes eld
\end_inset

Distributed Business Process
\begin_inset Quotes erd
\end_inset

, is also to be found in the bibliography.
 It concerns the design of management services that serve to coordinate
 the execution of the relevant business functions that are implemented natively
 in an integrated system's constituent applications, in order to achieve
 every particular business process.
 Such schemes can exist within larger SOA-abiding systems, and the lines
 between the two terms often blur.
\end_layout

\begin_layout Subsubsection
Business-to-Business Integration
\end_layout

\begin_layout Standard
In many cases, business functions may be available from outside suppliers
 or business partners.
 Business to Business (B2B) integration software provides the architecture
 needed to digitize information and route it through an organization’s trading
 ecosystem (usually online platforms) using the Electronic Data Exchange
 (EDI) format appropriate for the application.
\end_layout

\begin_layout Section
Integration in a Service-Oriented Architecture
\end_layout

\begin_layout Standard
Service Oriented Architecture (SOA) is an evolution of predecessors such
 as component-based architecture and Object Oriented Analysis and Design
 of remote objects e.g.
 the CORBA standard.
 
\end_layout

\begin_layout Standard
Component-based architecture, or component-based software engineering, emphasize
s separation of concerns with respect to the various functions provided
 in a given software system.
 Components are commonly implemented around interfaces, that encapsulate
 the particulars of the components' implementation, and narrow the available
 surface-area for wiring together the various functionally autonomous modules.
 Cohesion is maintained by fitting additional modules onto the interfaces.
 The modules, which can be of arbitrary origin, are rendered into components
 by implementing their respective interfaces.
 The modules can exist as components locally within the same virtual or
 physical machine, or in the context of distributed systems such as networks
 (e.g.
 as web services or web resources).
\end_layout

\begin_layout Standard
In the SOA evolution of this approach, reusability and use in the context
 of distributed systems is emphasised.
 To realize this architectural style's potential, the promulgation of Web
 Service standards becomes instrumental.
 In this way it is ensured that networked software components can be developed
 as generic 
\begin_inset Quotes eld
\end_inset

Web Services
\begin_inset Quotes erd
\end_inset

, or business function-specific components that are implemented without
 knowledge or regard for the multitude of systems in which they may be utilized.
 
\begin_inset Newline newline
\end_inset

The effort towards this end has borne results through the W3C Web Services
 specification, though nowadays the emergence of alternatives and the REST
 architectural style in particular has created a rift in the SOA ecosystem,
 which is nevertheless efficiently bridged by another core feature of SOA,
 the Enterprise Service Bus.
\begin_inset Newline newline
\end_inset

-TODO LITMUS
\end_layout

\begin_layout Standard
and the establishment of the practice of environment definition via Web
 Service Litmus tests.
 (TODO litmus is about 
\end_layout

\begin_layout Standard
http://deg.egov.bg/LP/soa.rup_soma/tasks/soa_service_qualification_E0D920A6.html
\end_layout

\begin_layout Standard
constraining the potential services to a subset that is reusable in the
 environment in which it is initially developed),
\end_layout

\begin_layout Standard
As mentioned previously, a distinctive feature of the SOA style is business
 centeredness, with components or interfaces aimed at fitting business functions
, rules, or goals.
\end_layout

\begin_layout Standard
Service-oriented architecture can be implemented with web services or Microservi
ces.
 This is done to make the functional building-blocks accessible over standard
 Internet protocols that are independent of platforms and programming languages.
 
\end_layout

\begin_layout Standard
(TODO domain driven design and microservices after loose coupling, reusability
 emphasis, ESBs) .
 It's central idea is the creation of a Ubiquitous Language with the assistance
 of domain experts, that embeds domain terminology into the software components'
 naming and structure.
 This approach is suitable for the design of middleware as it helps confer
 flexibility and extensibility to the resulting system, and reduces friction
 in the operations side, which, as mentioned previously, is an important
 factor when considering the adoption of integration solutions.
\end_layout

\begin_layout Standard
Each SOA system defines it's own environment, by which every service implementat
ion must abide.
 This is ensured through the provision of a “Litmus Test”, that determines
 whether a given service implementation is correct in it's particular SOA
 system's context.
 
\end_layout

\begin_layout Standard
A further recommendation of the SOA style is that open standards be used,
 their use being instrumental in realizing interoperability with different
 consumer implementations, and location transparency.
\end_layout

\begin_layout Standard
The related buzzword 
\end_layout

\begin_layout Standard
https://en.wikipedia.org/wiki/Service-oriented_architecture#Defining%20concepts
\end_layout

\begin_layout Standard
https://en.wikipedia.org/wiki/Enterprise_service_bus
\end_layout

\begin_layout Standard
A further property service-orientation promotes is loose coupling between
 services.
 SaaS can be considered to have evolved from SOA.
\end_layout

\begin_layout Standard
Loose coupling, in addition to enabling the development of distributed architect
ures composed of programs developed by different teams at different times,
 allows for domain-driven design to be observed in its constituent parts,
 which is claimed to increase maintainability and creative cross-domain
 collaboration.
\end_layout

\begin_layout Standard
Domain-Specific-Langueges and Aspect-Oriented Programming can be used to
 manage the complexity produced by the increased need for isolation and
 encapsulation that Domain-Driven design necessitates.
\end_layout

\begin_layout Standard
https://en.wikipedia.org/wiki/Domain-driven_design
\end_layout

\begin_layout Standard
Loose coupling is achieved through transactions, queues provided by message-orie
nted middleware, and interoperability standards.
\end_layout

\begin_layout Standard
Transactions help ensure validity of exchanges, queues enable asynchronicity
 and load balancing in distributed systems, and interoperability standards
 provide a common target for the integration of legacy systems (often rendering
 them network-enabled in the process) and newly implemented services alike.
\end_layout

\begin_layout Standard
(TODO benefits of SOA https://en.wikipedia.org/wiki/Service-oriented_architecture#
Organizational benefits )
\end_layout

\begin_layout Standard
In the messaging approach, provisions for asynchronicity (message buffers,
 brokers) and arbitrary consumer scaling are made.
\end_layout

\begin_layout Standard
(TODO Pure Messaging Integration approach https://en.wikipedia.org/wiki/Apache_Act
iveMQ#Usage )
\end_layout

\begin_layout Standard
Hybrid Web Service - Messaging SOAs using MOMs is common practice.
\end_layout

\begin_layout Standard
(TODO benefits with Microservice-based SOA https://en.wikipedia.org/wiki/Service-o
riented_architecture#Implementation approaches)
\end_layout

\begin_layout Standard
Microservices is a novel, implementation agnostic approach to SOA, that
 allows for domain-driven design to be observed (actually they are only
 loosely related and, in fact, operate at different scopes, as discussed
 here
\end_layout

\begin_layout Standard
https://www.ibm.com/cloud/learn/soa)
\end_layout

\begin_layout Standard
https://en.wikipedia.org/wiki/Service-oriented_architecture#Microservices
\end_layout

\begin_layout Section
Messaging in practice: Message Oriented Middleware
\end_layout

\begin_layout Standard
(TODO read EIPbook forewords on SOA, asynchronous messaging of self reliant
 systems being the point of integrated systems as opposed to n-tier codependent
 distributed systems, conferring benefits of request throttling and load
 balancing but increasing complexity; this fact makes asynchronous messaging
 a promising approach, and this has informed the direction of this thesis)
\end_layout

\begin_layout Standard
(TODO EIPbook p64 on Integration Approaches, with messaging as the most
 promising one)
\end_layout

\begin_layout Standard
(TODO SOA is enabled via messaging.
 Time to get deep into it)
\end_layout

\begin_layout Standard
Apache Camel is a framework for building MOM middleware.
 More generally, it aspires to enable integrations designed around the Enterpris
e Integration Pattern (EIP) vocabulary.
 In addition to native support for ActiveMQ and other message brokers via
 JMS, it provides features that enable most common SOA architectures, modern
 and legacy alike.
 Standard SOAP Web Services, RESTful http Web Services and more are natively
 supported, with Amazon Web Services, Graphql and other modern technologies
 supported as Extensions.
\end_layout

\begin_layout Standard
Examples from Java OOP, JMS messaging, Camel.
\end_layout

\begin_layout Itemize
Common architectural elements of MOM systems (request databases/message
 buffers, aggregators, api consumers, services).
 
\end_layout

\begin_layout Itemize
Intruduction to messaging, key problems it solves (separation of concerns,
 decoupling etc; use analogues from different domains e.g.
 URI barcodes etc) Identifier vs Locator disambiguation
\end_layout

\begin_layout Standard
Message passing implies URLs (Uniform Locator of Resources) Uniform Identifier:
 as in URI: 23-digit barcode form unique id of a thing whose location or
 mode of access is not defined plus Resource Locator: 
\end_layout

\begin_layout Standard
-Locator as in http:// (mode of access) which implies the rest is an address.
 
\end_layout

\begin_layout Standard
-Resource as in shared-nothing, volatile object: Evoke the same operation
 (e.g INSERT) twice, don't expect it to be the same function call because
 the message-passing abstraction hides (therefore isolates) underlying state
 changes.
 
\end_layout

\begin_layout Standard
Eg.
 a necessary rerouting of a request because a node is down does not concern
 the message sender.
 Drawing out the metaphor, URI = class interface, URL = address of volatile
 object 
\end_layout

\begin_layout Itemize
Message buffer considerations: When full: - Block the sender (deadlock risk)
 - Drop future messages (producer-consumer problem; unreliability), Asynchronici
ty and concurrency: gotta have both! + friends
\end_layout

\begin_layout Itemize
Services as components of monoliths vs distributed systems.
 Messaging in OOP vs JMS topic, queue schema.
 Compare and contrast, justify differences by comparing problem domains.
\end_layout

\begin_deeper
\begin_layout Standard
Pros: Shared--nothing, all the loose-coupling stuff 
\end_layout

\begin_layout Standard
Cons: overhead as arguments need to be copied and transmitted to the receiving
 object 
\end_layout

\begin_layout Itemize
https://en.wikipedia.org/wiki/Message_passing#Distributed_objects
\end_layout

\end_deeper
\begin_layout Section
Enterprise Integration Patterns
\end_layout

\begin_layout Subsection
Messaging
\end_layout

\begin_layout Standard
Message (and exchange), pipes and filters, router, translator, endpoint
\end_layout

\begin_layout Subsubsection
Message channel
\end_layout

\begin_layout Standard
point2point, publish-subscribe, channel adapter, message bus
\end_layout

\begin_layout Subsubsection
Router
\end_layout

\begin_layout Standard
filter, splitter, aggregator, broker
\end_layout

\begin_layout Subsubsection
Message endpoint
\end_layout

\begin_layout Standard
consumers: polling, event-driven, message dispatcher
\end_layout

\begin_layout Part
Apache Camel: EIPs in action
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Perhaps EIP chapter just belongs here
\end_layout

\begin_layout Section
Terminology
\end_layout

\begin_layout Standard
A Component is a factory for creating Endpoint instances.
\end_layout

\begin_layout Standard
Processors are necessarily implementations of the Camel Processor interface.
 Apart from that, services differ from processors in that they are meant
 to be used procedurally, called directly from within other methods, whereas
 processors are integrated in a program’s flow through message-based integration
, which is what Camel is built for.
\end_layout

\begin_layout Standard
This makes services the proper abstraction for program-wide configuration
 injection (e.g.
 PartnerManagementService) and a feasible one for utilities for which there
 is no expected need for integration with remote components (e.g.
 RequestHandlingService).
\end_layout

\begin_layout Itemize
Server as persistence hub, interacting with client services via library
 calls with 
\begin_inset Quotes eld
\end_inset

direct:
\begin_inset Quotes erd
\end_inset

 route chaining.
\end_layout

\begin_layout Itemize
Split, choice and aggregator branching and joining.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

from:
\begin_inset Quotes erd
\end_inset

-driven abstract pollers with different implementations per instance.
 How can Camel help adapt towards a more scalable microservice variant?
\end_layout

\begin_layout Standard
Multiple task scheduling components are available.
 They produce timer events that can be used to trigger recurring camel routes
 via consumer EIPs, or otherwise provide a means of time tracking for local
 or distributed tasks.
 The primary ones are scheduler (or it's simpler variant, timer) and quartz.
 
\end_layout

\begin_layout Standard
The scheduler component utilizes the host jdk's timer and is intended for
 locally tracked tasks that have no need for accuracy, as no provision is
 made against downtime.
\end_layout

\begin_layout Standard
The quartz component uses a database to store timer events and supports
 distributed timers, and is therefore fault tolerant and suitable for scheduling
 distributed tasks.
\end_layout

\begin_layout Subsection
Flow-based programming, 
\end_layout

\begin_layout Subsection
declarative DSLs/xml
\end_layout

\begin_layout Standard
Examples from declarative vs procedural DSLs (e.g.
 shell vs guile scripts), Spring traditional remoting vs Camel, timer/from
 components introduced here.
\end_layout

\begin_layout Itemize
Producer, consumer properties per component.
\end_layout

\begin_layout Itemize
Seamless remoting via 
\begin_inset Quotes eld
\end_inset

.to()
\begin_inset Quotes erd
\end_inset

 chaining.
 Direct ProducerTemplate calls.
\end_layout

\begin_layout Itemize
Other flow-based programming advantages.
\end_layout

\begin_layout Itemize
Declarative programming advantages, mention drag-and-drop services (e.g.
 redhat's integration product).
\end_layout

\begin_layout Itemize
Machine readable markup vs the DSL hack.
\end_layout

\begin_layout Section
Apache Camel field study
\end_layout

\begin_layout Standard
Examining a 3PL logistic company's middleware stack
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintAll"
bibfiles "references"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
